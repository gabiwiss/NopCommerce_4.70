@model MercadoPago.Resource.Preference.Preference
@inject Nop.Services.Configuration.ISettingService settingsService;
@inject Nop.Core.IStoreContext storeContext;
@{
    Layout = "_ColumnsOne";
    var store = storeContext.GetCurrentStore();
    var multiStoreSetting = settingsService.LoadSetting<Nop.Plugin.Payments.MercadoPago.MercadoPagoMultiStoreSettings>();
    var mercadoPagoSetting = settingsService.LoadSetting<Nop.Plugin.Payments.MercadoPago.MercadoPagoSettings>(multiStoreSetting.Enabled ? store.Id: 0);
  
}

@* <head>
    <!script src="https://sdk.mercadopago.com/js/v2" ></!script>
</head> *@

@if (ViewBag.AdditionalInfo == "Error")
{
    <div>
        <div class="page-title">
            <h1>Ha ocurrido un error </h1>
        </div>
        <div class="">
            <div class="title">
                <strong>Contacte con un administrador</strong>
            </div>
        </div>
    </div>
}
else
{
    <div id="wallet_container" style="display:none"></div>

    <div>
        <div class="page-title">
            <h1>Redirigiendo a MercadoPago</h1>
        </div>
        <div class="">
            <div class="title">
                <strong>Cargando</strong>
            </div>
        </div>
    </div>

    <script>
        const mp = new MercadoPago('@mercadoPagoSetting.PublicKey');
        const bricksBuilder = mp.bricks();
        mp.bricks().create("wallet", "wallet_container", {
            initialization: {
                preferenceId: "@Model.Id",
            },
            customization: {
                texts: {
                    valueProp: 'smart_option',
                },
            },
            callbacks: {
                onReady: () => { clickWithDelay(); },
                onSubmit: () => { },
                onError: (error) => console.error(error),

            },

        });

    </script>


    <script>
        function clickMp() {
            var botonmp = document.getElementsByClassName("svelte-h6o0kp mercadopago-color-2OUiJu")[0];
            botonmp.click();
        }

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        async function clickWithDelay() {
            await sleep(2000);
            clickMp();
        }
    </script>
}

